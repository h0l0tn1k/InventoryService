/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package cz.siemens.inventory.api.gen;

import cz.siemens.inventory.api.gen.model.Supplier;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Api(value = "suppliers", description = "the suppliers API")
public interface SuppliersApi {

    Logger log = LoggerFactory.getLogger(SuppliersApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "Creates new Supplier", nickname = "createSupplier", notes = "", response = Supplier.class, tags={ "Supplier", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Supplier created", response = Supplier.class),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/suppliers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Supplier> createSupplier(@ApiParam(value = "Supplier object that needs to be created" ,required=true )  @Valid @RequestBody Supplier body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"name\",  \"id\" : 0}", Supplier.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SuppliersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Deletes an Supplier", nickname = "deleteSupplier", notes = "", tags={ "Supplier", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Supplier was deleted."),
        @ApiResponse(code = 404, message = "Specified Supplier does not exist.") })
    @RequestMapping(value = "/suppliers/{supplierId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteSupplier(@ApiParam(value = "Supplier's id",required=true) @PathVariable("supplierId") Long supplierId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SuppliersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Gets Supplier based on supplierId", nickname = "getSupplier", notes = "", response = Supplier.class, tags={ "Supplier", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The Supplier", response = Supplier.class),
        @ApiResponse(code = 404, message = "Requested Supplier does not exist.") })
    @RequestMapping(value = "/suppliers/{supplierId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Supplier> getSupplier(@ApiParam(value = "Supplier's id",required=true) @PathVariable("supplierId") Long supplierId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"name\",  \"id\" : 0}", Supplier.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SuppliersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Gets all Suppliers", nickname = "getSuppliers", notes = "", response = Supplier.class, responseContainer = "List", tags={ "Supplier", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All Suppliers", response = Supplier.class, responseContainer = "List") })
    @RequestMapping(value = "/suppliers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Supplier>> getSuppliers() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {  \"name\" : \"name\",  \"id\" : 0}, {  \"name\" : \"name\",  \"id\" : 0} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SuppliersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Updates Supplier based on supplierId", nickname = "updateSupplier", notes = "", response = Supplier.class, tags={ "Supplier", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The Supplier", response = Supplier.class),
        @ApiResponse(code = 404, message = "Requested Company Owner does not exist.") })
    @RequestMapping(value = "/suppliers/{supplierId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Supplier> updateSupplier(@ApiParam(value = "Supplier's id",required=true) @PathVariable("supplierId") Long supplierId,@ApiParam(value = "Supplier object that needs to be updated" ,required=true )  @Valid @RequestBody Supplier body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{  \"name\" : \"name\",  \"id\" : 0}", Supplier.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default SuppliersApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
